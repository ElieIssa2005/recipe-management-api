package com.example.recipeoop_1.model;

// import io.swagger.v3.oas.annotations.media.Schema; // Ensure this is removed
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.util.List;
import java.util.ArrayList;

/**
 * Represents a recipe in the recipe management system.
 * <p>
 * This class is a MongoDB document, stored in the "recipes" collection (or category-specific
 * collections like "recipe_desserts" depending on the service implementation).
 * It contains details such as the recipe's title, ingredients, instructions, cooking time,
 * category, and the user who created it.
 * </p>
 *
 * @author Elie Issa/Michel Ghazaly
 * @version 1.1
 * @since 2025-05-14
 */
// The comment below was an instruction and has been replaced by the Javadoc above.
// /**
// * This is a simplified Recipe model with the createdBy field.
// * Make sure to save this file in the exact path:
// * src/main/java/com/example/recipeoop_1/model/Recipe.java
// */
@Document(collection = "recipes") // Default collection, may be overridden by service logic for categories
// @Schema(description = "Recipe information") // Swagger annotation removed
public class Recipe {

    /**
     * The unique identifier for the recipe.
     * This field is automatically generated by MongoDB if not provided.
     * It is annotated with {@link org.springframework.data.annotation.Id}.
     */
    @Id
    private String id;

    /**
     * The title of the recipe (e.g., "Chocolate Cake").
     */
    private String title;

    /**
     * A list of strings, where each string represents an ingredient and its quantity
     * (e.g., "2 cups flour", "100g sugar").
     * Initialized to an empty ArrayList to prevent null pointer exceptions.
     */
    private List<String> ingredients = new ArrayList<>();

    /**
     * The step-by-step instructions for preparing the recipe.
     */
    private String instructions;

    /**
     * The estimated cooking time for the recipe, in minutes.
     */
    private Integer cookingTime;

    /**
     * The category to which the recipe belongs (e.g., "Dessert", "Main Course", "Appetizer").
     */
    private String category;

    /**
     * The username of the user who created this recipe.
     * This field is used for tracking ownership and for authorization purposes.
     */
    private String createdBy;  // Make sure this field exists

    /**
     * Default constructor for the {@code Recipe} class.
     * <p>
     * Initializes a new instance of {@code Recipe}.
     * Required by frameworks like Jackson for deserialization and by Spring Data MongoDB.
     * </p>
     */
    public Recipe() {
    }

    // Getter and setter for createdBy
    /**
     * Gets the username of the user who created the recipe.
     *
     * @return The username of the creator.
     */
    public String getCreatedBy() {
        return createdBy;
    }

    /**
     * Sets the username of the user who created the recipe.
     *
     * @param createdBy The username of the creator.
     */
    public void setCreatedBy(String createdBy) {
        this.createdBy = createdBy;
    }

    // Getters and setters for other fields
    /**
     * Gets the unique identifier of the recipe.
     *
     * @return The recipe ID.
     */
    public String getId() {
        return id;
    }

    /**
     * Sets the unique identifier of the recipe.
     * This is typically managed by the database and should not be set manually
     * unless for specific use cases (e.g., mapping from an external system).
     *
     * @param id The recipe ID to set.
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Gets the title of the recipe.
     *
     * @return The recipe title.
     */
    public String getTitle() {
        return title;
    }

    /**
     * Sets the title of the recipe.
     *
     * @param title The recipe title to set.
     */
    public void setTitle(String title) {
        this.title = title;
    }

    /**
     * Gets the list of ingredients for the recipe.
     *
     * @return A list of strings, each representing an ingredient.
     */
    public List<String> getIngredients() {
        return ingredients;
    }

    /**
     * Sets the list of ingredients for the recipe.
     *
     * @param ingredients A list of strings, each representing an ingredient.
     */
    public void setIngredients(List<String> ingredients) {
        this.ingredients = ingredients;
    }

    /**
     * Gets the instructions for preparing the recipe.
     *
     * @return The recipe preparation instructions.
     */
    public String getInstructions() {
        return instructions;
    }

    /**
     * Sets the instructions for preparing the recipe.
     *
     * @param instructions The recipe preparation instructions to set.
     */
    public void setInstructions(String instructions) {
        this.instructions = instructions;
    }

    /**
     * Gets the cooking time for the recipe in minutes.
     *
     * @return The cooking time in minutes, or {@code null} if not set.
     */
    public Integer getCookingTime() {
        return cookingTime;
    }

    /**
     * Sets the cooking time for the recipe in minutes.
     *
     * @param cookingTime The cooking time in minutes to set.
     */
    public void setCookingTime(Integer cookingTime) {
        this.cookingTime = cookingTime;
    }

    /**
     * Gets the category of the recipe.
     *
     * @return The recipe category (e.g., "Dessert", "Main Course").
     */
    public String getCategory() {
        return category;
    }

    /**
     * Sets the category of the recipe.
     *
     * @param category The recipe category to set.
     */
    public void setCategory(String category) {
        this.category = category;
    }
}